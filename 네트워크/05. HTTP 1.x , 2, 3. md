# HTTP1.x (Hypertext Transfer Protocol)
HTTP1.0은 기본적으로 한 연결당 하나의 요청을 처리하도록 설계됨.
이는 RTT증가를 불러오게 됨.

#### RTT증가
서버로부터 파일을 가져올때마다 TCP의 3-웨이 핸드셰이크를 계속해서 열어야 하기 때문에 RTT가 증ㄱ사하는 단점이 있다.
<br/>
RTT : 패킷이 목적지에 도달하고 나서 다시 출발지로 돌아오기까지 걸리는 시간이면 패킷왕복 시간

- HTTP1.0의 RTT증가를 해결하기 위한 방법
1. 이미지스플리팅 : 많은 이미지를 다운로드받게 되면 과부하가 걸리기 때문에 많은 이미지가 합쳐 있는 하나의 이미지를 다운로드 받고, 이를 기반으로 백그라운드 이미지 포지션을 이용하여 이미지를 표기하는 방법.
EX) image.css와 네이버 쇼핑 사례

2. 코드압축 : 코드를 압축해서 개행문자, 빈칸을 없애서 코드의 크기를 최소화하는 방법. 개행문자, 띄어쓰기 등이 사려져 코드용향이 줄어듬

3. BASE64 인코딩 : 이미지 파일을 64진법으로 이루어진 문자열로 인코딩하는 방법. 이 방법을 사용하면 서버와의 연결을 열고 이미지에 대해 서버에 HTTP 요청을 할 필요가 없다는 장점이 있다. 하지만 BASE64 문자열로 변활할 경우 37%정도 크기가 더 커지는 단점이 있다.

(인코딩 :  정보의 형태나 형식을 표준화, 보안, 처리 속도 향상, 저장 공간 절약 등을 위해 다른 형태나 형식으로 변환하는 처리 방식)

- HTTP/1.1 : HTTP/1.0에서 발전한것. 매번 TCP연결을 하는 것이 아니라 한 번 TCP 초기화를 한 이루에 KEEP-ALIVE라는 옵션으로 여러개의 파일을 송수신할 수 있게 바뀜. 그러나 해결할 수 없었던 문제점이 HOL BLOCKING.
HOL BLOCKING은 네트워크에서 같은 큐에 있는 패킷이 그 첫번째 ㅍ패킷에 의해 지연될때 발생하는 성능 저하 현상.

# HTTP/2
SPDY 프로토콜에서 파생되었으며 HTTP/1.x보다 지연 시간을 줄이고 응답 시간을더 빠르게 할 수 있으며 멀티플렉싱, 헤더 압축, 서버 푸시, 요청의 우선순위 처리를 지원하는 프로토콜. HOL을 해결
1. 멀티 플렉싱 : 여러개의 스트림을 사용하여 송수신하는것 (스트림 : 시간이 지남에 따라 사용할 수 있게 되는 일련의 데이터 요소를 가리키는 데이터 흐름) 이를 통해 특정 스트림의 패킷이 손실되었다고 하러다도 해단 스트림에만 영향을 미치고 나머지 스트림은 멀쩡하게 동작할 수 있음
2. 해더 압축 : HTTP/1에서는 크기가 큰 헤더라는 문제점이 있었음. 이를 해더 압축을 써서 해결하는데 , 허프만 코딩 압축 알고리즘을 사용하는 HPACK압축 형식을 가진다.
(허프만 코딩 : 문자열을 문자 단위로 쪼개 빈도수를 세어 빈도가 높은 정보는 적은 비트수를 사용하여 표현하고, 빈도가 낮은 정보는 비트수를 많이 사용하여 표현해서 전체 데이터의 표현에 필요한 비트양을 줄이는 원리가 들어있는 알고리즘.
3. 서버푸시 : HTTP/1 에서는 클라이언트가 서버에 요청을 해야 파일을 다운로드 받을수 있었다면 2는 클라이언트 요청 없이 서버가 바로 리소스를 푸시할수 있다. html에는 css ,js 파일이 포함되기 마련인데 html을 읽으면서 그안에 들어 있던 css파일을 서버에서 푸시하여 클라이언트에 먼저 줄 수 있다.

# HEEP/3
QUIC이라는 계층 위에서 돌아가며, TCP 기반이 아닌 UDP 기반으로 돌아 가며 HTTP/2에서
장점이었던 멀티플렉싱 등을 가지고 있으며 초기연결설정시 지연시간 감소라는 대표적 특성과 순방향
오류 수정 메커니즘이라는 특징을 가짐.


